package com.steffenhebestreit.ai_research.Service;

import java.io.IOException;

/**
 * Interface for components that need to receive and process task update notifications.
 * 
 * <p>This interface defines the contract for real-time task update broadcasting in the
 * AI Research system. Implementations handle the delivery of task status changes, message
 * updates, and artifact notifications to connected clients, monitoring systems, and
 * other interested components.</p>
 * 
 * <h3>Core Functionality:</h3>
 * <ul>
 * <li><strong>Real-time Updates:</strong> Immediate notification of task state changes</li>
 * <li><strong>Event Broadcasting:</strong> Distribution of updates to multiple clients</li>
 * <li><strong>Type-specific Handling:</strong> Different processing for various event types</li>
 * <li><strong>Error Management:</strong> Graceful handling of delivery failures</li>
 * </ul>
 * 
 * <h3>Update Event Types:</h3>
 * <ul>
 * <li><code>task_status_update</code> - Task status transitions (PENDING → PROCESSING → COMPLETED)</li>
 * <li><code>message_update</code> - New messages added to task conversation</li>
 * <li><code>artifact_update</code> - New artifacts generated by task processing</li>
 * <li><code>progress_update</code> - Task progress and completion percentage</li>
 * <li><code>error_update</code> - Error notifications and failure information</li>
 * </ul>
 * 
 * <h3>Implementation Patterns:</h3>
 * <ul>
 * <li><strong>Server-Sent Events (SSE):</strong> Browser-based real-time updates</li>
 * <li><strong>WebSocket:</strong> Bidirectional real-time communication</li>
 * <li><strong>Message Queues:</strong> Asynchronous update distribution</li>
 * <li><strong>Webhook Callbacks:</strong> External system notifications</li>
 * </ul>
 * 
 * <h3>Error Handling:</h3>
 * <ul>
 * <li>IOException handling for network and connection failures</li>
 * <li>Graceful degradation when clients disconnect</li>
 * <li>Retry mechanisms for temporary failures</li>
 * <li>Logging and monitoring of delivery issues</li>
 * </ul>
 * 
 * <h3>Use Cases:</h3>
 * <ul>
 * <li>Live task monitoring dashboards</li>
 * <li>Real-time progress indicators in user interfaces</li>
 * <li>System monitoring and alerting</li>
 * <li>Multi-agent coordination and status sharing</li>
 * </ul>
 * 
 * @author Steffen Hebestreit
 * @version 1.0
 * @since 1.0
 * @see TaskService
 * @see TaskStreamingController
 * @see Task
 */
public interface TaskUpdateListener {
    
    /**
     * Delivers a task update to registered clients or systems.
     * 
     * <p>Processes and delivers task update notifications to connected clients,
     * monitoring systems, or other interested components. The method handles
     * different event types with appropriate formatting and delivery mechanisms
     * while managing potential delivery failures.</p>
     * 
     * <h3>Delivery Process:</h3>
     * <ul>
     * <li>Formats update data according to event type</li>
     * <li>Identifies target clients or systems for delivery</li>
     * <li>Delivers updates using appropriate communication channels</li>
     * <li>Handles delivery failures and connection issues</li>
     * </ul>
     * 
     * <h3>Update Data Structure:</h3>
     * <p>The update object contains event-specific data:</p>
     * <ul>
     * <li><strong>Status Updates:</strong> Task object with new status and metadata</li>
     * <li><strong>Message Updates:</strong> Message object with content and role</li>
     * <li><strong>Artifact Updates:</strong> TaskArtifact object with generated content</li>
     * <li><strong>Progress Updates:</strong> Progress percentage and completion estimates</li>
     * </ul>
     * 
     * <h3>Event Type Handling:</h3>
     * <ul>
     * <li><strong>task_status_update:</strong> Status transitions, timestamps, metadata</li>
     * <li><strong>message_update:</strong> New conversation messages and responses</li>
     * <li><strong>artifact_update:</strong> Generated files, reports, and outputs</li>
     * <li><strong>progress_update:</strong> Completion percentage and time estimates</li>
     * <li><strong>error_update:</strong> Error messages and failure diagnostics</li>
     * </ul>
     * 
     * <h3>Error Handling:</h3>
     * <ul>
     * <li>IOException for network connectivity issues</li>
     * <li>Client disconnection handling</li>
     * <li>Retry logic for temporary failures</li>
     * <li>Graceful degradation for partial delivery failures</li>
     * </ul>
     * 
     * <h3>Implementation Considerations:</h3>
     * <ul>
     * <li>Non-blocking delivery to prevent task processing delays</li>
     * <li>Thread-safe implementation for concurrent task processing</li>
     * <li>Efficient serialization for large update objects</li>
     * <li>Connection management and cleanup</li>
     * </ul>
     * 
     * @param taskId The unique identifier of the task being updated
     * @param update The data object containing the update information (Task, Message, TaskArtifact, etc.)
     * @param eventType The type of event being delivered (task_status_update, message_update, etc.)
     * @throws IOException If there's an error delivering the update to clients or systems
     * @see Task
     * @see Message
     * @see TaskArtifact
     */
    void sendTaskUpdate(String taskId, Object update, String eventType) throws IOException;
}
